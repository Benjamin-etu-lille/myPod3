# Generated by Django 4.2.20 on 2025-04-03 09:48

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pod.video.models
import tagulous.models.fields
import tagulous.models.models
import tinymce.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        ('podfile', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('main', '0001_initial'),
        ('authentication', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdvancedNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('0', 'Private (me only)'), ('1', 'Shared with video owner'), ('2', 'Public')], default='0', help_text='Select an availability level for the note.', max_length=1, verbose_name='Availability level')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('timestamp', models.IntegerField(blank=True, null=True, verbose_name='Timestamp')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date added')),
                ('modified_on', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Advanced Note',
                'verbose_name_plural': 'Advanced Notes',
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Please choose a title as short and accurate as possible, reflecting the main subject / context of the content.(max length: 100 characters)', max_length=100, unique=True, verbose_name='Title')),
                ('title_fr', models.CharField(help_text='Please choose a title as short and accurate as possible, reflecting the main subject / context of the content.(max length: 100 characters)', max_length=100, null=True, unique=True, verbose_name='Title')),
                ('title_en', models.CharField(help_text='Please choose a title as short and accurate as possible, reflecting the main subject / context of the content.(max length: 100 characters)', max_length=100, null=True, unique=True, verbose_name='Title')),
                ('slug', models.SlugField(editable=False, help_text='Used to access this instance, the "slug" is a short label containing only letters, numbers, underscore or dash top.', max_length=100, unique=True, verbose_name='Slug')),
                ('description', tinymce.models.HTMLField(blank=True, help_text='In this field you can describe your content, add all needed related information, and format the result using the toolbar.', verbose_name='Description')),
                ('description_fr', tinymce.models.HTMLField(blank=True, help_text='In this field you can describe your content, add all needed related information, and format the result using the toolbar.', null=True, verbose_name='Description')),
                ('description_en', tinymce.models.HTMLField(blank=True, help_text='In this field you can describe your content, add all needed related information, and format the result using the toolbar.', null=True, verbose_name='Description')),
                ('color', models.CharField(blank=True, help_text='The background color for your channel. You can use the format #. i.e.: #ff0000 for red', max_length=10, null=True, verbose_name='Background color')),
                ('style', models.TextField(blank=True, help_text='The style will be added to your channel to show it', null=True, verbose_name='Extra style')),
                ('visible', models.BooleanField(default=False, help_text='If checked, the channel appear in a list of available channels on the platform.', verbose_name='Visible')),
                ('add_channels_tab', models.ManyToManyField(blank=True, to='main.additionalchanneltab', verbose_name='Additionals channels tab')),
                ('allow_to_groups', models.ManyToManyField(blank=True, help_text='One or more groups who can upload video to this channel.', to='authentication.accessgroup', verbose_name='Groups')),
                ('headband', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='podfile.customimagemodel', verbose_name='Headband')),
                ('owners', models.ManyToManyField(blank=True, related_name='owners_channels', to=settings.AUTH_USER_MODEL, verbose_name='Owners')),
                ('site', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='sites.site', verbose_name='Site')),
                ('users', models.ManyToManyField(blank=True, related_name='users_channels', to=settings.AUTH_USER_MODEL, verbose_name='Users')),
            ],
            options={
                'verbose_name': 'Channel',
                'verbose_name_plural': 'Channels',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('direct_parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='direct_children', to='video.comment')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='video.comment')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
            },
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True, verbose_name='title')),
                ('title_fr', models.CharField(max_length=100, null=True, unique=True, verbose_name='title')),
                ('title_en', models.CharField(max_length=100, null=True, unique=True, verbose_name='title')),
                ('slug', models.SlugField(help_text='Used to access this instance, the "slug" is a short label containing only letters, numbers, underscore or dash top.', max_length=100, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, null=True)),
                ('description_fr', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('icon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='podfile.customimagemodel', verbose_name='Icon')),
                ('site', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='sites.site', verbose_name='Site')),
            ],
            options={
                'verbose_name': 'Discipline',
                'verbose_name_plural': 'Disciplines',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Tagulous_Video_tags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Please choose a title as short and accurate as possible, reflecting the main subject / context of the content.(max length: 100 characters)', max_length=100, verbose_name='Title')),
                ('title_fr', models.CharField(help_text='Please choose a title as short and accurate as possible, reflecting the main subject / context of the content.(max length: 100 characters)', max_length=100, null=True, verbose_name='Title')),
                ('title_en', models.CharField(help_text='Please choose a title as short and accurate as possible, reflecting the main subject / context of the content.(max length: 100 characters)', max_length=100, null=True, verbose_name='Title')),
                ('slug', models.SlugField(editable=False, help_text='Used to access this instance, the "slug" is a short label containing only letters, numbers, underscore or dash top.', max_length=100, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='In this field you can describe your content, add all needed related information, and format the result using the toolbar.', null=True, verbose_name='Description')),
                ('description_fr', models.TextField(blank=True, help_text='In this field you can describe your content, add all needed related information, and format the result using the toolbar.', null=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, help_text='In this field you can describe your content, add all needed related information, and format the result using the toolbar.', null=True, verbose_name='Description')),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='themes', to='video.channel', verbose_name='Channel')),
                ('headband', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='podfile.customimagemodel', verbose_name='Headband')),
                ('parentId', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='video.theme', verbose_name='Theme parent')),
            ],
            options={
                'verbose_name': 'Theme',
                'verbose_name_plural': 'Themes',
                'ordering': ['channel', 'title'],
                'unique_together': {('channel', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True, verbose_name='Title')),
                ('title_fr', models.CharField(max_length=100, null=True, unique=True, verbose_name='Title')),
                ('title_en', models.CharField(max_length=100, null=True, unique=True, verbose_name='Title')),
                ('slug', models.SlugField(help_text='Used to access this instance, the "slug" is a short label containing only letters, numbers, underscore or dash top.', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, null=True)),
                ('description_fr', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('icon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='podfile.customimagemodel', verbose_name='Icon')),
                ('sites', models.ManyToManyField(to='sites.site')),
            ],
            options={
                'verbose_name': 'Type',
                'verbose_name_plural': 'Types',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='UpdateOwner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Update Owner',
                'verbose_name_plural': 'Update Owners',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(help_text='You can send an audio or video file.', max_length=255, upload_to=pod.video.models.get_storage_path_video, verbose_name='Video')),
                ('title', models.CharField(help_text='A title as short and accurate as possible, reflecting the main subject / context of the content. (max length: 250 characters)', max_length=250, verbose_name='Title')),
                ('title_fr', models.CharField(help_text='A title as short and accurate as possible, reflecting the main subject / context of the content. (max length: 250 characters)', max_length=250, null=True, verbose_name='Title')),
                ('title_en', models.CharField(help_text='A title as short and accurate as possible, reflecting the main subject / context of the content. (max length: 250 characters)', max_length=250, null=True, verbose_name='Title')),
                ('slug', models.SlugField(editable=False, help_text='Used to access this instance, the "slug" is a short label containing only letters, numbers, underscore or dash top.', max_length=255, unique=True, verbose_name='Slug')),
                ('description', tinymce.models.HTMLField(blank=True, help_text='Describe your content, add all needed related information, and format the result using the toolbar.', verbose_name='Description')),
                ('description_fr', tinymce.models.HTMLField(blank=True, help_text='Describe your content, add all needed related information, and format the result using the toolbar.', null=True, verbose_name='Description')),
                ('description_en', tinymce.models.HTMLField(blank=True, help_text='Describe your content, add all needed related information, and format the result using the toolbar.', null=True, verbose_name='Description')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date added')),
                ('date_evt', models.DateField(blank=True, default=datetime.date.today, null=True, verbose_name='Date of event')),
                ('cursus', models.CharField(choices=[('0', 'None / All'), ('L', 'Bachelor’s Degree'), ('M', 'Master’s Degree'), ('D', 'Doctorate'), ('1', 'Other')], default='0', help_text='Select an university course as audience target of the content.', max_length=1, verbose_name='University course')),
                ('main_lang', models.CharField(choices=[('-- Frequently used languages --', (('de', 'German'), ('en', 'English'), ('ar', 'Arabic'), ('zh', 'Chinese'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('ru', 'Russian'))), ('-- All languages --', (('ab', 'Abkhazian'), ('aa', 'Afar'), ('af', 'Afrikaans'), ('sq', 'Albanian'), ('am', 'Amharic'), ('ar', 'Arabic'), ('an', 'Aragonese'), ('hy', 'Armenian'), ('as', 'Assamese'), ('ay', 'Aymara'), ('az', 'Azerbaijani'), ('ba', 'Bashkir'), ('eu', 'Basque'), ('bn', 'Bengali (Bangla)'), ('dz', 'Bhutani'), ('bh', 'Bihari'), ('bi', 'Bislama'), ('br', 'Breton'), ('bg', 'Bulgarian'), ('my', 'Burmese'), ('be', 'Byelorussian (Belarusian)'), ('km', 'Cambodian'), ('ca', 'Catalan'), ('zh', 'Chinese'), ('co', 'Corsican'), ('hr', 'Croatian'), ('cs', 'Czech'), ('da', 'Danish'), ('nl', 'Dutch'), ('en', 'English'), ('eo', 'Esperanto'), ('et', 'Estonian'), ('fo', 'Faeroese'), ('fa', 'Farsi'), ('fj', 'Fiji'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('gl', 'Galician'), ('gd', 'Gaelic (Scottish)'), ('gv', 'Gaelic (Manx)'), ('ka', 'Georgian'), ('de', 'German'), ('el', 'Greek'), ('kl', 'Greenlandic'), ('gn', 'Guarani'), ('gu', 'Gujarati'), ('ht', 'Haitian Creole'), ('ha', 'Hausa'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hu', 'Hungarian'), ('is', 'Icelandic'), ('io', 'Ido'), ('id', 'Indonesian'), ('ia', 'Interlingua'), ('ie', 'Interlingue'), ('iu', 'Inuktitut'), ('ik', 'Inupiak'), ('ga', 'Irish'), ('it', 'Italian'), ('ja', 'Japanese'), ('jv', 'Javanese'), ('kn', 'Kannada'), ('ks', 'Kashmiri'), ('kk', 'Kazakh'), ('rw', 'Kinyarwanda (Ruanda)'), ('ky', 'Kirghiz'), ('rn', 'Kirundi (Rundi)'), ('ko', 'Korean'), ('ku', 'Kurdish'), ('lo', 'Laothian'), ('la', 'Latin'), ('lv', 'Latvian (Lettish)'), ('li', 'Limburgish ( Limburger)'), ('ln', 'Lingala'), ('lt', 'Lithuanian'), ('mk', 'Macedonian'), ('mg', 'Malagasy'), ('ms', 'Malay'), ('ml', 'Malayalam'), ('mt', 'Maltese'), ('mi', 'Maori'), ('mr', 'Marathi'), ('mo', 'Moldavian'), ('mn', 'Mongolian'), ('na', 'Nauru'), ('ne', 'Nepali'), ('no', 'Norwegian'), ('oc', 'Occitan'), ('or', 'Oriya'), ('om', 'Oromo (Afaan Oromo)'), ('ps', 'Pashto (Pushto)'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pa', 'Punjabi'), ('qu', 'Quechua'), ('rm', 'Rhaeto-Romance'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sm', 'Samoan'), ('sg', 'Sangro'), ('sa', 'Sanskrit'), ('sr', 'Serbian'), ('sh', 'Serbo-Croatian'), ('st', 'Sesotho'), ('tn', 'Setswana'), ('sn', 'Shona'), ('ii', 'Sichuan Yi'), ('sd', 'Sindhi'), ('si', 'Sinhalese'), ('ss', 'Siswati'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('so', 'Somali'), ('es', 'Spanish'), ('su', 'Sundanese'), ('sw', 'Swahili (Kiswahili)'), ('sv', 'Swedish'), ('tl', 'Tagalog'), ('tg', 'Tajik'), ('ta', 'Tamil'), ('tt', 'Tatar'), ('te', 'Telugu'), ('th', 'Thai'), ('bo', 'Tibetan'), ('ti', 'Tigrinya'), ('to', 'Tonga'), ('ts', 'Tsonga'), ('tr', 'Turkish'), ('tk', 'Turkmen'), ('tw', 'Twi'), ('ug', 'Uighur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('vo', 'Volapük'), ('wa', 'Wallon'), ('cy', 'Welsh'), ('wo', 'Wolof'), ('xh', 'Xhosa'), ('yi', 'Yiddish'), ('yo', 'Yoruba'), ('zu', 'Zulu')))], default='fr', help_text='The main language used in the content.', max_length=2, verbose_name='Main language')),
                ('transcript', models.CharField(blank=True, choices=[], help_text='Select an available language to transcribe the audio.', max_length=2, verbose_name='Transcript')),
                ('licence', models.CharField(blank=True, choices=[('by', 'Attribution 4.0 International (CC BY 4.0)'), ('by-nd', 'Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)'), ('by-nc-nd', 'Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)'), ('by-nc', 'Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)'), ('by-nc-sa', 'Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)'), ('by-sa', 'Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)')], help_text='Usage rights granted to your content.', max_length=8, null=True, verbose_name='Licence')),
                ('allow_downloading', models.BooleanField(default=False, help_text='Check this box if you to allow downloading of the encoded files', verbose_name='allow downloading')),
                ('is_360', models.BooleanField(default=False, help_text='Check this box if you want to use the 360 player for the video', verbose_name='video 360')),
                ('is_draft', models.BooleanField(default=True, help_text='If this box is checked, the video will be visible and accessible only by you and the additional owners.', verbose_name='Draft')),
                ('is_restricted', models.BooleanField(default=False, help_text='If this box is checked, the video will only be accessible to authenticated users.', verbose_name='Authentication restricted access')),
                ('password', models.CharField(blank=True, help_text='Viewing this video will not be possible without this password.', max_length=50, null=True, verbose_name='password')),
                ('order', models.PositiveSmallIntegerField(blank=True, default=1, help_text='Order videos in channels or themes.', null=True, verbose_name='order')),
                ('duration', models.IntegerField(blank=True, default=0, editable=False, verbose_name='Duration')),
                ('overview', models.ImageField(blank=True, editable=False, max_length=255, null=True, upload_to=pod.video.models.get_storage_path_video, verbose_name='Overview')),
                ('encoding_in_progress', models.BooleanField(default=False, editable=False, verbose_name='Encoding in progress')),
                ('is_video', models.BooleanField(default=True, editable=False, verbose_name='Is Video')),
                ('date_delete', models.DateField(default=pod.video.models.default_date_delete, help_text='Date when your video will be automatically removed from Pod.', verbose_name='Date to delete')),
                ('disable_comment', models.BooleanField(default=False, help_text='Prevent users from commenting on your content.', verbose_name='Disable comment')),
                ('additional_owners', models.ManyToManyField(blank=True, help_text='Additional owners will have the same rights as you, except that they can’t delete this media.', related_name='owners_videos', to=settings.AUTH_USER_MODEL, verbose_name='Additional owners')),
                ('channel', models.ManyToManyField(blank=True, help_text='The channel where you want your content to appear.', to='video.channel', verbose_name='Channels')),
                ('discipline', models.ManyToManyField(blank=True, help_text='The disciplines to which your content belongs.', to='video.discipline', verbose_name='Disciplines')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('restrict_access_to_groups', models.ManyToManyField(blank=True, help_text='One or more groups who can access to this video', to='authentication.accessgroup', verbose_name='Groups')),
                ('sites', models.ManyToManyField(to='sites.site')),
                ('tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text='Separate tags with spaces, enclose the tags consist of several words in quotation marks.', to='video.tagulous_video_tags', verbose_name='Tags')),
                ('theme', models.ManyToManyField(blank=True, help_text='Hold down "Control", or "Command" on a Mac, to select more than one.', to='video.theme', verbose_name='Themes')),
                ('thumbnail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='videos', to='podfile.customimagemodel', verbose_name='Thumbnails')),
                ('type', models.ForeignKey(help_text='The general type of the video.', on_delete=django.db.models.deletion.CASCADE, to='video.type', verbose_name='Type')),
            ],
            options={
                'verbose_name': 'video',
                'verbose_name_plural': 'videos',
                'ordering': ['-date_added', '-id'],
                'get_latest_by': 'date_added',
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='video.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vote',
                'verbose_name_plural': 'Votes',
            },
        ),
        migrations.CreateModel(
            name='VideoVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(blank=True, choices=[('O', 'Original version')], default='O', help_text='Video default version.', max_length=1, verbose_name='Video version')),
                ('video', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='video.video', verbose_name='Video')),
            ],
            options={
                'verbose_name': 'Video version',
                'verbose_name_plural': 'Video versions',
            },
        ),
        migrations.CreateModel(
            name='VideoToDelete',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_deletion', models.DateField(default=datetime.date.today, unique=True, verbose_name='Date for deletion')),
                ('video', models.ManyToManyField(to='video.video', verbose_name='Videos')),
            ],
            options={
                'verbose_name': 'Video to delete',
                'verbose_name_plural': 'Videos to delete',
            },
        ),
        migrations.CreateModel(
            name='NoteComments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('0', 'Private (me only)'), ('1', 'Shared with video owner'), ('2', 'Public')], default='0', help_text='Select an availability level for the comment.', max_length=1, verbose_name='Availability level')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date added')),
                ('modified_on', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('parentCom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='video.notecomments')),
                ('parentNote', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='video.advancednotes')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Note comment',
                'verbose_name_plural': 'Note comments',
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='video',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='video.video'),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Please choose a title as short and accurate as possible, reflecting the main subject / context of the content. (max length: 100 characters)', max_length=100, verbose_name='Category title')),
                ('slug', models.SlugField(editable=False, help_text='Used to access this instance, the "slug" is a short label containing only letters, numbers, underscore or dash top.', max_length=110, unique=True, verbose_name='Slug')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('video', models.ManyToManyField(blank=True, help_text='Hold down "Control", or "Command" on a Mac, to select more than one.', to='video.video', verbose_name='Videos')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['title', 'id'],
            },
        ),
        migrations.AddField(
            model_name='advancednotes',
            name='video',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='video.video'),
        ),
        migrations.CreateModel(
            name='ViewCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today, editable=False, verbose_name='Date')),
                ('count', models.IntegerField(default=0, editable=False, verbose_name='Number of view')),
                ('video', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='video.video', verbose_name='Video')),
            ],
            options={
                'verbose_name': 'View count',
                'verbose_name_plural': 'View counts',
                'unique_together': {('video', 'date')},
            },
        ),
        migrations.CreateModel(
            name='VideoAccessToken',
            fields=[
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='Change me!', max_length=100, verbose_name='Token name')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='video.video')),
            ],
            options={
                'verbose_name': 'Video access token',
                'verbose_name_plural': 'Video access tokens',
                'ordering': ['video', 'token'],
                'unique_together': {('video', 'token')},
            },
        ),
        migrations.CreateModel(
            name='UserMarkerTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('markerTime', models.IntegerField(default=0, editable=False, verbose_name='Marker time')),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('video', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='video.video', verbose_name='Video')),
            ],
            options={
                'verbose_name': 'User viewing time marker of video',
                'verbose_name_plural': 'Users viewing time marker of video',
                'unique_together': {('video', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='video.video')),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
                'unique_together': {('video', 'user')},
            },
        ),
        migrations.AddConstraint(
            model_name='channel',
            constraint=models.UniqueConstraint(fields=('slug', 'site'), name='channel_unique_slug_site'),
        ),
        migrations.AlterUniqueTogether(
            name='advancednotes',
            unique_together={('video', 'user', 'timestamp', 'status')},
        ),
    ]
