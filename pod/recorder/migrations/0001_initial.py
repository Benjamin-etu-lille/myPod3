# Generated by Django 4.2.20 on 2025-04-03 09:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tagulous.models.models
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Recorder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='name')),
                ('description', tinymce.models.HTMLField(blank=True, verbose_name='description')),
                ('address_ip', models.GenericIPAddressField(help_text='IP address of the recorder.', unique=True, verbose_name='Address IP')),
                ('salt', models.CharField(blank=True, help_text='Recorder salt.', max_length=50, verbose_name='salt')),
                ('credentials_login', models.CharField(blank=True, default='', help_text='Recorder credentials login.', max_length=255, verbose_name='Credentials login')),
                ('credentials_password', models.CharField(blank=True, default='', help_text='Recorder credentials password.', max_length=255, verbose_name='Credentials password')),
                ('recording_type', models.CharField(choices=[('video', 'Video'), ('audiovideocast', 'Audiovideocast'), ('studio', 'Studio')], default='video', max_length=50, verbose_name='Recording Type')),
                ('publication_auto', models.BooleanField(default=False, help_text='If this box is checked, the videos will be automatically assigned to the recorder manager.', verbose_name='Automatic publishing:')),
                ('is_draft', models.BooleanField(default=True, help_text='If this box is checked, the video will be visible and accessible only by you and the additional owners.', verbose_name='Draft')),
                ('is_restricted', models.BooleanField(default=False, help_text='If this box is checked, the video will only be accessible to authenticated users.', verbose_name='Restricted access')),
                ('password', models.CharField(blank=True, help_text='Viewing this video will not be possible without this password.', max_length=50, null=True, verbose_name='password')),
                ('cursus', models.CharField(choices=[('0', 'None / All'), ('L', 'Bachelor’s Degree'), ('M', 'Master’s Degree'), ('D', 'Doctorate'), ('1', 'Other')], default='0', help_text='Select an university course as audience target of the content.', max_length=1, verbose_name='University course')),
                ('main_lang', models.CharField(choices=[('-- Frequently used languages --', (('de', 'German'), ('en', 'English'), ('ar', 'Arabic'), ('zh', 'Chinese'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('ru', 'Russian'))), ('-- All languages --', (('ab', 'Abkhazian'), ('aa', 'Afar'), ('af', 'Afrikaans'), ('sq', 'Albanian'), ('am', 'Amharic'), ('ar', 'Arabic'), ('an', 'Aragonese'), ('hy', 'Armenian'), ('as', 'Assamese'), ('ay', 'Aymara'), ('az', 'Azerbaijani'), ('ba', 'Bashkir'), ('eu', 'Basque'), ('bn', 'Bengali (Bangla)'), ('dz', 'Bhutani'), ('bh', 'Bihari'), ('bi', 'Bislama'), ('br', 'Breton'), ('bg', 'Bulgarian'), ('my', 'Burmese'), ('be', 'Byelorussian (Belarusian)'), ('km', 'Cambodian'), ('ca', 'Catalan'), ('zh', 'Chinese'), ('co', 'Corsican'), ('hr', 'Croatian'), ('cs', 'Czech'), ('da', 'Danish'), ('nl', 'Dutch'), ('en', 'English'), ('eo', 'Esperanto'), ('et', 'Estonian'), ('fo', 'Faeroese'), ('fa', 'Farsi'), ('fj', 'Fiji'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('gl', 'Galician'), ('gd', 'Gaelic (Scottish)'), ('gv', 'Gaelic (Manx)'), ('ka', 'Georgian'), ('de', 'German'), ('el', 'Greek'), ('kl', 'Greenlandic'), ('gn', 'Guarani'), ('gu', 'Gujarati'), ('ht', 'Haitian Creole'), ('ha', 'Hausa'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hu', 'Hungarian'), ('is', 'Icelandic'), ('io', 'Ido'), ('id', 'Indonesian'), ('ia', 'Interlingua'), ('ie', 'Interlingue'), ('iu', 'Inuktitut'), ('ik', 'Inupiak'), ('ga', 'Irish'), ('it', 'Italian'), ('ja', 'Japanese'), ('jv', 'Javanese'), ('kn', 'Kannada'), ('ks', 'Kashmiri'), ('kk', 'Kazakh'), ('rw', 'Kinyarwanda (Ruanda)'), ('ky', 'Kirghiz'), ('rn', 'Kirundi (Rundi)'), ('ko', 'Korean'), ('ku', 'Kurdish'), ('lo', 'Laothian'), ('la', 'Latin'), ('lv', 'Latvian (Lettish)'), ('li', 'Limburgish ( Limburger)'), ('ln', 'Lingala'), ('lt', 'Lithuanian'), ('mk', 'Macedonian'), ('mg', 'Malagasy'), ('ms', 'Malay'), ('ml', 'Malayalam'), ('mt', 'Maltese'), ('mi', 'Maori'), ('mr', 'Marathi'), ('mo', 'Moldavian'), ('mn', 'Mongolian'), ('na', 'Nauru'), ('ne', 'Nepali'), ('no', 'Norwegian'), ('oc', 'Occitan'), ('or', 'Oriya'), ('om', 'Oromo (Afaan Oromo)'), ('ps', 'Pashto (Pushto)'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pa', 'Punjabi'), ('qu', 'Quechua'), ('rm', 'Rhaeto-Romance'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sm', 'Samoan'), ('sg', 'Sangro'), ('sa', 'Sanskrit'), ('sr', 'Serbian'), ('sh', 'Serbo-Croatian'), ('st', 'Sesotho'), ('tn', 'Setswana'), ('sn', 'Shona'), ('ii', 'Sichuan Yi'), ('sd', 'Sindhi'), ('si', 'Sinhalese'), ('ss', 'Siswati'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('so', 'Somali'), ('es', 'Spanish'), ('su', 'Sundanese'), ('sw', 'Swahili (Kiswahili)'), ('sv', 'Swedish'), ('tl', 'Tagalog'), ('tg', 'Tajik'), ('ta', 'Tamil'), ('tt', 'Tatar'), ('te', 'Telugu'), ('th', 'Thai'), ('bo', 'Tibetan'), ('ti', 'Tigrinya'), ('to', 'Tonga'), ('ts', 'Tsonga'), ('tr', 'Turkish'), ('tk', 'Turkmen'), ('tw', 'Twi'), ('ug', 'Uighur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('vo', 'Volapük'), ('wa', 'Wallon'), ('cy', 'Welsh'), ('wo', 'Wolof'), ('xh', 'Xhosa'), ('yi', 'Yiddish'), ('yo', 'Yoruba'), ('zu', 'Zulu')))], default='fr', help_text='The main language used in the content.', max_length=2, verbose_name='Main language')),
                ('transcript', models.CharField(blank=True, choices=[], help_text='Select an available language to transcribe the audio.', max_length=2, verbose_name='Transcript')),
                ('licence', models.CharField(blank=True, choices=[('by', 'Attribution 4.0 International (CC BY 4.0)'), ('by-nd', 'Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)'), ('by-nc-nd', 'Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)'), ('by-nc', 'Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)'), ('by-nc-sa', 'Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)'), ('by-sa', 'Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)')], help_text='Usage rights granted to your content.', max_length=8, null=True, verbose_name='Licence')),
                ('allow_downloading', models.BooleanField(default=False, help_text='Check this box if you to allow downloading of the encoded files', verbose_name='allow downloading')),
                ('is_360', models.BooleanField(default=False, help_text='Check this box if you want to use the 360 player for the video', verbose_name='video 360')),
                ('disable_comment', models.BooleanField(default=False, help_text='Allows you to turn off all comments on this video.', verbose_name='Disable comment')),
                ('directory', models.CharField(help_text='Basic directory containing the videos published by the recorder.', max_length=50, unique=True, verbose_name='Publication directory')),
                ('additional_users', models.ManyToManyField(blank=True, help_text='You can add additionals users to the recorder. They will become the additionnals owners of the published videos and will have the same rights as the owner except that they can’t delete the published videos.', related_name='users_recorders', to=settings.AUTH_USER_MODEL, verbose_name='Additional users')),
            ],
            options={
                'verbose_name': 'Recorder',
                'verbose_name_plural': 'Recorders',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tagulous_Recorder_tags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='RecordingFileTreatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FilePathField(help_text='Source file of the published video.', path='/data/ftp-pod/ftp/', recursive=True, unique=True)),
                ('file_size', models.BigIntegerField(default=0, verbose_name='File size')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date added')),
                ('require_manual_claim', models.BooleanField(default=False, help_text='Has this recording file require a manual claim by a user?', verbose_name='Require manual claim?')),
                ('email_sent', models.BooleanField(default=False, help_text='Has an email been sent to the manager of the concerned recorder?', verbose_name='Email sent?')),
                ('date_email_sent', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Date email sent')),
                ('type', models.CharField(choices=[('video', 'Video'), ('audiovideocast', 'Audiovideocast'), ('studio', 'Studio')], default='video', max_length=50)),
                ('recorder', models.ForeignKey(help_text='Recorder that made this recording.', null=True, on_delete=django.db.models.deletion.CASCADE, to='recorder.recorder', verbose_name='Recorder')),
            ],
            options={
                'verbose_name': 'Recording file treatment',
                'verbose_name_plural': 'Recording file treatments',
            },
        ),
        migrations.CreateModel(
            name='RecordingFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='uploads/')),
                ('recorder', models.ForeignKey(default=1, help_text='Recorder that made this recording.', on_delete=django.db.models.deletion.CASCADE, to='recorder.recorder', verbose_name='Recorder')),
            ],
            options={
                'verbose_name': 'Recording file',
                'verbose_name_plural': 'Recording files',
            },
        ),
        migrations.CreateModel(
            name='Recording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('type', models.CharField(choices=[('video', 'Video'), ('audiovideocast', 'Audiovideocast'), ('studio', 'Studio')], default='video', max_length=50, verbose_name='Recording Type')),
                ('source_file', models.FilePathField(max_length=200, path='/data/ftp-pod/ftp/', recursive=True, unique=True)),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='date added')),
                ('recorder', models.ForeignKey(default=1, help_text='Recorder that made this recording.', on_delete=django.db.models.deletion.CASCADE, to='recorder.recorder', verbose_name='Recorder')),
                ('user', models.ForeignKey(default=1, help_text='User who has made the recording', limit_choices_to={'is_staff': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recording',
                'verbose_name_plural': 'Recordings',
            },
        ),
    ]
