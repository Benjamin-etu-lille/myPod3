# Generated by Django 4.2.20 on 2025-04-03 09:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pod.live.models
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0002_initial'),
        ('podfile', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Broadcaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='name')),
                ('slug', models.SlugField(default='', editable=False, help_text='Used to access this instance, the "slug" is a short label containing only letters, numbers, underscore or dash top.', max_length=200, unique=True, verbose_name='Slug')),
                ('description', tinymce.models.HTMLField(blank=True, verbose_name='description')),
                ('url', models.URLField(help_text='Url of the stream', unique=True, verbose_name='URL')),
                ('status', models.BooleanField(default=0, help_text='Check if the broadcaster is currently sending stream.')),
                ('enable_add_event', models.BooleanField(default=0, help_text='If checked, it will allow to create an event to this broadcaster.', verbose_name='Enable add event')),
                ('enable_viewer_count', models.BooleanField(default=1, help_text='Enable viewers count on live.', verbose_name='Enable viewers count')),
                ('is_restricted', models.BooleanField(default=False, help_text='Live is accessible only to authenticated users.', verbose_name='Restricted access')),
                ('public', models.BooleanField(default=True, help_text='Live is accessible from the Live tab', verbose_name='Show in live tab')),
                ('piloting_implementation', models.CharField(default='', help_text='Select the piloting implementation for to this broadcaster.', max_length=100, null=True, verbose_name='Piloting implementation')),
                ('piloting_conf', models.TextField(blank=True, default='', help_text='Add piloting configuration parameters in Json format.', verbose_name='Piloting configuration parameters')),
                ('main_lang', models.CharField(choices=[('-- Frequently used languages --', (('de', 'German'), ('en', 'English'), ('ar', 'Arabic'), ('zh', 'Chinese'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('ru', 'Russian'))), ('-- All languages --', (('ab', 'Abkhazian'), ('aa', 'Afar'), ('af', 'Afrikaans'), ('sq', 'Albanian'), ('am', 'Amharic'), ('ar', 'Arabic'), ('an', 'Aragonese'), ('hy', 'Armenian'), ('as', 'Assamese'), ('ay', 'Aymara'), ('az', 'Azerbaijani'), ('ba', 'Bashkir'), ('eu', 'Basque'), ('bn', 'Bengali (Bangla)'), ('dz', 'Bhutani'), ('bh', 'Bihari'), ('bi', 'Bislama'), ('br', 'Breton'), ('bg', 'Bulgarian'), ('my', 'Burmese'), ('be', 'Byelorussian (Belarusian)'), ('km', 'Cambodian'), ('ca', 'Catalan'), ('zh', 'Chinese'), ('co', 'Corsican'), ('hr', 'Croatian'), ('cs', 'Czech'), ('da', 'Danish'), ('nl', 'Dutch'), ('en', 'English'), ('eo', 'Esperanto'), ('et', 'Estonian'), ('fo', 'Faeroese'), ('fa', 'Farsi'), ('fj', 'Fiji'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('gl', 'Galician'), ('gd', 'Gaelic (Scottish)'), ('gv', 'Gaelic (Manx)'), ('ka', 'Georgian'), ('de', 'German'), ('el', 'Greek'), ('kl', 'Greenlandic'), ('gn', 'Guarani'), ('gu', 'Gujarati'), ('ht', 'Haitian Creole'), ('ha', 'Hausa'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hu', 'Hungarian'), ('is', 'Icelandic'), ('io', 'Ido'), ('id', 'Indonesian'), ('ia', 'Interlingua'), ('ie', 'Interlingue'), ('iu', 'Inuktitut'), ('ik', 'Inupiak'), ('ga', 'Irish'), ('it', 'Italian'), ('ja', 'Japanese'), ('jv', 'Javanese'), ('kn', 'Kannada'), ('ks', 'Kashmiri'), ('kk', 'Kazakh'), ('rw', 'Kinyarwanda (Ruanda)'), ('ky', 'Kirghiz'), ('rn', 'Kirundi (Rundi)'), ('ko', 'Korean'), ('ku', 'Kurdish'), ('lo', 'Laothian'), ('la', 'Latin'), ('lv', 'Latvian (Lettish)'), ('li', 'Limburgish ( Limburger)'), ('ln', 'Lingala'), ('lt', 'Lithuanian'), ('mk', 'Macedonian'), ('mg', 'Malagasy'), ('ms', 'Malay'), ('ml', 'Malayalam'), ('mt', 'Maltese'), ('mi', 'Maori'), ('mr', 'Marathi'), ('mo', 'Moldavian'), ('mn', 'Mongolian'), ('na', 'Nauru'), ('ne', 'Nepali'), ('no', 'Norwegian'), ('oc', 'Occitan'), ('or', 'Oriya'), ('om', 'Oromo (Afaan Oromo)'), ('ps', 'Pashto (Pushto)'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pa', 'Punjabi'), ('qu', 'Quechua'), ('rm', 'Rhaeto-Romance'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sm', 'Samoan'), ('sg', 'Sangro'), ('sa', 'Sanskrit'), ('sr', 'Serbian'), ('sh', 'Serbo-Croatian'), ('st', 'Sesotho'), ('tn', 'Setswana'), ('sn', 'Shona'), ('ii', 'Sichuan Yi'), ('sd', 'Sindhi'), ('si', 'Sinhalese'), ('ss', 'Siswati'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('so', 'Somali'), ('es', 'Spanish'), ('su', 'Sundanese'), ('sw', 'Swahili (Kiswahili)'), ('sv', 'Swedish'), ('tl', 'Tagalog'), ('tg', 'Tajik'), ('ta', 'Tamil'), ('tt', 'Tatar'), ('te', 'Telugu'), ('th', 'Thai'), ('bo', 'Tibetan'), ('ti', 'Tigrinya'), ('to', 'Tonga'), ('ts', 'Tsonga'), ('tr', 'Turkish'), ('tk', 'Turkmen'), ('tw', 'Twi'), ('ug', 'Uighur'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('vo', 'Volapük'), ('wa', 'Wallon'), ('cy', 'Welsh'), ('wo', 'Wolof'), ('xh', 'Xhosa'), ('yi', 'Yiddish'), ('yo', 'Yoruba'), ('zu', 'Zulu')))], default='fr', help_text='Select the main language used in the content.', max_length=2, verbose_name='Main language')),
                ('transcription_file', models.FileField(editable=False, max_length=255, null=True, upload_to='media/live_transcripts')),
            ],
            options={
                'verbose_name': 'Broadcaster',
                'verbose_name_plural': 'Broadcasters',
                'ordering': ['building', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='name')),
                ('gmapurl', models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                'verbose_name': 'Building',
                'verbose_name_plural': 'Buildings',
                'ordering': ['name'],
                'permissions': (('acces_live_pages', 'Access to all live pages'),),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False, max_length=255, unique=True, verbose_name='Slug')),
                ('title', models.CharField(help_text='Please choose a title as short and accurate as possible, reflecting the main subject / context of the content. (max length: 250 characters)', max_length=250, verbose_name='Title')),
                ('description', tinymce.models.HTMLField(blank=True, help_text='In this field you can describe your content, add all needed related information, and format the result using the toolbar.', verbose_name='Description')),
                ('start_date', models.DateTimeField(default=pod.live.models.current_time, help_text='Start of the live event.', verbose_name='Start date')),
                ('end_date', models.DateTimeField(default=pod.live.models.one_hour_hence, help_text='End of the live event.', verbose_name='End date')),
                ('iframe_url', models.URLField(blank=True, help_text='Url of the embedded site to display', null=True, verbose_name='Embedded Site URL')),
                ('iframe_height', models.IntegerField(blank=True, help_text='Height of the embedded site (in pixels)', null=True, verbose_name='Embedded Site Height')),
                ('aside_iframe_url', models.URLField(blank=True, help_text='Url of the embedded site to display on aside', null=True, verbose_name='Embedded aside Site URL')),
                ('is_draft', models.BooleanField(default=True, help_text='If this box is checked, the event will be visible only by you and the additional owners but accessible to anyone having the url link.', verbose_name='Draft')),
                ('is_restricted', models.BooleanField(default=False, help_text='If this box is checked, the event will only be accessible to authenticated users.', verbose_name='Restricted access')),
                ('is_auto_start', models.BooleanField(default=False, help_text='If this box is checked, the record will start automatically.', verbose_name='Auto start')),
                ('is_recording_stopped', models.BooleanField(default=False)),
                ('password', models.CharField(blank=True, help_text='Viewing this event will not be possible without this password.', max_length=50, null=True, verbose_name='password')),
                ('max_viewers', models.IntegerField(default=0, help_text='Maximum of distinct viewers', verbose_name='Max viewers')),
                ('enable_transcription', models.BooleanField(default=False, help_text='If this box is checked, the transcription will be enabled.', verbose_name='Enable transcription')),
                ('additional_owners', models.ManyToManyField(blank=True, help_text='You can add additional owners to the event. They will have the same rights as you except that they can’t delete this event.', related_name='owners_events', to=settings.AUTH_USER_MODEL, verbose_name='Additional owners')),
                ('broadcaster', models.ForeignKey(help_text='Broadcaster name.', on_delete=django.db.models.deletion.CASCADE, to='live.broadcaster', verbose_name='Broadcaster')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('restrict_access_to_groups', models.ManyToManyField(blank=True, help_text='Select one or more groups who can access to this event', to='authentication.accessgroup', verbose_name='Groups')),
                ('thumbnail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='podfile.customimagemodel', verbose_name='Thumbnails')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='LiveTranscriptRunningTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(max_length=255, unique=True)),
                ('broadcaster', models.ForeignKey(help_text='Broadcaster name.', on_delete=django.db.models.deletion.CASCADE, to='live.broadcaster', verbose_name='Broadcaster')),
            ],
            options={
                'verbose_name': 'Running task',
                'verbose_name_plural': 'Running tasks',
            },
        ),
        migrations.CreateModel(
            name='HeartBeat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewkey', models.CharField(max_length=200, unique=True, verbose_name='Viewkey')),
                ('last_heartbeat', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Last heartbeat')),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='live.event', verbose_name='Event')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Viewer')),
            ],
            options={
                'verbose_name': 'Heartbeat',
                'verbose_name_plural': 'Heartbeats',
                'ordering': ['event'],
            },
        ),
    ]
